const chalk = require('chalk');

const {
  gerarChaveSimetrica,
  criptografarSimetrico,
  descriptografarSimetrico,
  gerarChavesAssimetricas,
  criptografarAssimetrica,
  descriptografarAssimetrica
} = require('./criptografia.js'); 

console.log(chalk.bold.bgBlue.white("\n=== Demonstra√ß√£o de Criptografia H√≠brida (Alice e Bob) ===\n"));

// =====================================================================
// ETAPA 1: PREPARA√á√ÉO DO RECEPTOR (BOB)
// Bob gera suas chaves assim√©tricas (p√∫blica e privada).
// A chave p√∫blica pode ser compartilhada, a privada JAMAIS!
// =====================================================================
console.log(chalk.blue("--- ETAPA 1: Prepara√ß√£o do Receptor (Bob) ---"));

const { chavePublica: chavePublicaBob, chavePrivada: chavePrivadaBob } = gerarChavesAssimetricas();
console.log("üîê Bob gera seu par de chaves assim√©tricas:");
console.log("   - Chave P√∫blica de Bob (para criptografar PARA ele):" , chavePublicaBob);
console.log("   - Chave Privada de Bob (s√≥ ele tem, para descriptografar):", chavePrivadaBob);
console.log("   Bob compartilha sua Chave P√∫blica com Alice (e com quem quiser enviar algo para ele).");

// =====================================================================
// ETAPA 2: ALICE QUER ENVIAR UMA MENSAGEM
// Alice prepara a mensagem e a chave para a comunica√ß√£o.
// =====================================================================
console.log("\n--- ETAPA 2: Alice Prepara a Mensagem ---");

const mensagemAlice = "Oi Bob, to enviando os relat√≥rios de pagamento da empresa.";
console.log("üë© Mensagem original que Alice quer enviar: ", chalk.green(`"${mensagemAlice}"`));

// =====================================================================
// ETAPA 3: ALICE GERA UMA CHAVE SIM√âTRICA (CHAVE DE SESS√ÉO)
// Essa chave ser√° usada para criptografar a mensagem original por ser r√°pida.
// =====================================================================
console.log(chalk.blue("\n--- ETAPA 3: Alice Gera a Chave de Sess√£o (Sim√©trica) ---"));

const chaveSimetricaAlice = gerarChaveSimetrica();
console.log("üîë Alice gera uma nova Chave Sim√©trica tempor√°ria (Chave de Sess√£o):", chalk.yellow(chaveSimetricaAlice));

// =====================================================================
// ETAPA 4: ALICE CRIPTOGRAFA A MENSAGEM COM A CHAVE SIM√âTRICA
// =====================================================================
console.log(chalk.blue("\n--- ETAPA 4: Alice Criptografa a Mensagem original ---"));

const mensagemCriptografada = criptografarSimetrico(mensagemAlice, chaveSimetricaAlice);
console.log("üîí Alice criptografa a mensagem original usando a Chave Sim√©trica:", chalk.blue(mensagemCriptografada));
console.log("   A mensagem agora est√° ileg√≠vel para quem n√£o tiver a Chave Sim√©trica.");

// =====================================================================
// ETAPA 5: ALICE CRIPTOGRAFA A CHAVE SIM√âTRICA COM A CHAVE P√öBLICA DE BOB
// Isso garante que S√ì BOB poder√° obter a chave sim√©trica.
// =====================================================================
console.log(chalk.blue("\n--- ETAPA 5: Alice Protege a Chave de Sess√£o ---"));

const chaveSimetricaCriptografada = criptografarAssimetrica(String(chaveSimetricaAlice), chavePublicaBob);
console.log(chalk.green("üóùÔ∏è Alice criptografa a Chave Sim√©trica (") + chalk.yellow(chaveSimetricaAlice) + chalk.green(") usando a Chave P√∫blica de Bob:"), chalk.magenta(chaveSimetricaCriptografada));

// =====================================================================
// ETAPA 6: ALICE ENVIA PARA BOB
// =====================================================================
console.log(chalk.bold.blue("\n--- ETAPA 6: Alice Envia os Dados ---"));
console.log("üì¶ Alice envia para Bob (atrav√©s de um canal potencialmente inseguro):");
console.log("   - Mensagem criptografada (sim√©trica):", chalk.blue(mensagemCriptografada));
console.log("   - Chave Sim√©trica criptografada (assim√©trica):", chalk.magenta(chaveSimetricaCriptografada));

// =====================================================================
// ETAPA 7: BOB RECEBE E DESCRIPTOGRAFA A CHAVE SIM√âTRICA
// Bob usa sua chave privada (que s√≥ ele tem) para obter a chave sim√©trica.
// =====================================================================
console.log(chalk.bold.blue("\n--- ETAPA 7: Bob Descriptografa a Chave de Sess√£o ---"));

console.log("üì• Bob recebe os dados.");
const chaveSimetricaRecebidaStr = descriptografarAssimetrica(chaveSimetricaCriptografada, chavePrivadaBob);
const chaveSimetricaRecebida = parseInt(chaveSimetricaRecebidaStr);
console.log("üóùÔ∏è Bob usa sua Chave Privada (üîí) para descriptografar a Chave Sim√©trica:", chalk.yellow(chaveSimetricaRecebida));

// =====================================================================
// ETAPA 8: BOB DESCRIPTOGRAFA A MENSAGEM COM A CHAVE SIM√âTRICA
// Agora que Bob tem a chave, ele pode ler a mensagem.
// =====================================================================
console.log(chalk.bold.blue("\n--- ETAPA 8: Bob Descriptografa a Mensagem original ---"));

const mensagemRecebida = descriptografarSimetrico(mensagemCriptografada, chaveSimetricaRecebida);
console.log("‚úÖ Bob usa a Chave Sim√©trica recuperada para descriptografar a mensagem: ", chalk.green(`"${mensagemRecebida}"`));
console.log("   Mensagem lida com sucesso e seguran√ßa!");

// =====================================================================
// O QUE UM ATACANTE (bisbilhoteiro) VERIA E POR QUE A SEGURAN√áA √â MANTIDA
// =====================================================================
console.log(chalk.bold.red("\n--- üëπ O QUE UM ATACANTE (Bisbilhoteiro) VERIA? ---"));

console.log("üëπ Bisbilhoteiro (o atacante) interceptou os seguintes dados trafegando na rede:");
console.log("   Mensagem criptografada (sim√©trica):", chalk.dim(mensagemCriptografada));
console.log("   Chave sim√©trica criptografada (assim√©trica):", chalk.dim(chaveSimetricaCriptografada));

